var searchIndex = JSON.parse('{\
"openrailwaymap_exporter":{"doc":"OpenRailwayMap Exporter","t":[0,0,0,0,0,5,5,2,2,2,8,10,10,10,2,8,10,10,10,0,3,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,3,11,11,11,11,5,11,11,11,11,5,11,11,5,11,11,11,11,5,12,12,11,11,12,12,12,12,0,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11],"n":["export","prelude","railway_algorithms","railway_api_client","railway_model","generate_dot_string","generate_svg_string","OverpassApiClient","RailwayApiClient","overpass_api_client","PathFinding","shortest_path_distance","shortest_path_edges","shortest_path_nodes","OverpassApiClient","RailwayApiClient","connect","fetch_by_area_name","fetch_by_bbox","overpass_api_client","Coordinate","ElementType","Node","OverpassApiClient","RailwayElement","Way","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connect","count_node_elements","count_way_elements","default","default","deserialize","deserialize","deserialize","element_type","eq","eq","eq","fetch_by_area_name","fetch_by_bbox","fmt","fmt","fmt","from","from","from","from","from_json","geometry","id","into","into","into","into","lat","lat","lon","lon","new","new_with_id","nodes","serialize","serialize","serialize","tags","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","RailwayEdge","RailwayGraph","RailwayNode","borrow","borrow","borrow_mut","borrow_mut","calculate_geometry_length","clone","clone","clone_into","clone_into","create_nodes","eq","eq","find_next_existing_node","fmt","fmt","from","from","from_railway_elements","id","id","into","into","lat","length","lon","path","railway_graph","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","RailwayGraph","borrow","borrow_mut","bounding_box","clone","clone_into","eq","fmt","from","graph","into","node_indices","shortest_path_distance","shortest_path_edges","shortest_path_nodes","to_owned","total_length","try_from","try_into","type_id"],"q":["openrailwaymap_exporter","","","","","openrailwaymap_exporter::export","","openrailwaymap_exporter::prelude","","","openrailwaymap_exporter::railway_algorithms","","","","openrailwaymap_exporter::railway_api_client","","","","","","openrailwaymap_exporter::railway_api_client::overpass_api_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::railway_model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::railway_model::railway_graph","","","","","","","","","","","","","","","","","","",""],"d":["Export module for the OpenRailwayMap Exporter.","This prelude re-exports the most commonly used items from …","Module <code>railway_algorithms</code> provides algorithms for working …","Railway API Client module for the OpenRailwayMap Exporter.","Railway Model module for the OpenRailwayMap Exporter.","Generates a DOT string representation of a given …","Generates an SVG string representation of a given …","","","","<code>PathFinding</code> trait provides pathfinding algorithms for …","Calculate the shortest path distance between two nodes.","Calculate the shortest path between two nodes as a list of …","Calculate the shortest path between two nodes as a list of …","","A trait for implementing an Railway API client.","Connect to the OpenRailwayMap API using the specified URL.","Fetch OpenRailwayMap data by area name.","Fetch OpenRailwayMap data by bounding box.","overpass api client","A <code>Coordinate</code> represents a geographic coordinate with …","Represents the type of a <code>RailwayElement</code>.","Represents a <code>Node</code> element in the railway network.","A basic client for the OpenRailwayMap API.","Represents an element of a railway network.","Represents a <code>Way</code> element in the railway network.","","","","","","","","","","","","Counts the number of <code>Node</code> elements in a given vector of …","Counts the number of <code>Way</code> elements in a vector of …","","","","","","The type of the railway element, either <code>Way</code> or <code>Node</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a JSON value into a vector of <code>RailwayElement</code> …","An optional list of coordinates that represent the …","The unique identifier of the railway element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The latitude coordinate, in decimal degrees.","The latitude coordinate of a <code>Node</code> element.","The longitude coordinate, in decimal degrees.","The longitude coordinate of a <code>Node</code> element.","Creates a new <code>OverpassApiClient</code> with no specified API URL.","Create a new <code>RailwayElement</code> instance with the specified ID.","An optional ordered list of node IDs that define the …","","","","Optional key-value pairs associated with the railway …","","","","","","","","","","","","","","Represents a railway edge with a unique ID, a length, and …","","Represents a railway node with a unique ID and geographic …","","","","","Calculate the total length of a sequence of coordinates by …","","","","","Create a vector of <code>RailwayNode</code>s from the provided …","","","Find the next existing node ID and its index in the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>RailwayGraph</code> from a vector of <code>RailwayElement</code>s.","The ID of the edge, typically corresponding to the ID of …","The unique identifier of the railway node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The latitude coordinate of the railway node.","The length of the railway segment in meters.","The longitude coordinate of the railway node.","The path of the edge, stored as a <code>LineString</code>.","A module for working with railway graphs.","","","","","","","","","<code>RailwayGraph</code> represents a graph structure for railway …","","","Calculate the bounding box of the graph.","","","","","Returns the argument unchanged.","The internal graph used to represent the railway network.","Calls <code>U::from(self)</code>.","A HashMap that maps node IDs to their corresponding …","","","","","Calculate the total length of the railway network.","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,27,27,27,0,0,28,28,28,0,0,0,17,0,0,17,14,13,17,16,14,13,17,16,13,13,14,0,0,14,16,13,17,16,16,13,17,16,14,14,13,17,16,14,13,17,16,16,16,16,14,13,17,16,13,16,13,16,14,16,16,13,17,16,16,13,14,13,17,16,14,13,17,16,14,13,17,16,0,0,0,24,25,24,25,0,24,25,24,25,0,24,25,0,24,25,24,25,0,24,25,24,25,25,24,25,24,0,24,25,24,25,24,25,24,25,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[1,[[5,[2,[4,[3]]]]]],[1,[[5,[2,[4,[3]]]]]],0,0,0,0,[[6,6],[[8,[7]]]],[[6,6],[[8,[[9,[6]]]]]],[[6,6],[[8,[[9,[6]]]]]],0,0,[10,[[12,[[4,[11]]]]]],[10,[[12,[[4,[11]]]]]],[10,[[12,[[4,[11]]]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[[]],[[14,10],[[12,[[4,[11]]]]]],[[],15],[[],15],[[],14],[[],16],[[],[[5,[13]]]],[[],[[5,[17]]]],[[],[[5,[16]]]],0,[[13,13],18],[[17,17],18],[[16,16],18],[[14,10],[[12,[[4,[11]]]]]],[[14,10],[[12,[[4,[11]]]]]],[[13,19],20],[[17,19],20],[[16,19],20],[[]],[[]],[[]],[[]],[21,[[5,[[9,[16]],22]]]],0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[],14],[6,16],0,[13,5],[17,5],[16,5],0,[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],23],[[],23],[[],23],[[],23],0,0,0,[[]],[[]],[[]],[[]],[[],7],[24,24],[25,25],[[]],[[]],[[],[[9,[25]]]],[[24,24],18],[[25,25],18],[[[8,[6]],26]],[[24,19],20],[[25,19],20],[[]],[[]],[[],1],0,0,[[]],[[]],0,0,0,0,0,[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],23],[[],23],0,[[]],[[]],[1],[1,1],[[]],[[1,1],18],[[1,19],20],[[]],0,[[]],0,[[1,6,6],[[8,[7]]]],[[1,6,6],[[8,[[9,[6]]]]]],[[1,6,6],[[8,[[9,[6]]]]]],[[]],[1,7],[[],5],[[],5],[[],23]],"p":[[3,"RailwayGraph"],[3,"String"],[8,"Error"],[3,"Box"],[4,"Result"],[15,"i64"],[15,"f64"],[4,"Option"],[3,"Vec"],[15,"str"],[8,"Future"],[3,"Pin"],[3,"Coordinate"],[3,"OverpassApiClient"],[15,"usize"],[3,"RailwayElement"],[4,"ElementType"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Value"],[3,"Error"],[3,"TypeId"],[3,"RailwayEdge"],[3,"RailwayNode"],[3,"HashMap"],[8,"PathFinding"],[8,"RailwayApiClient"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
