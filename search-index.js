var searchIndex = JSON.parse('{\
"openrailwaymap_exporter":{"doc":"OpenRailwayMap Exporter","t":[3,3,4,13,8,3,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,5,5,11,11,11,11,11,12,11,11,11,11,11,10,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,12,12,0,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,5,11,11,11,12,11,12,11,11,11],"n":["BasicOpenRailwayMapApiClient","Coordinate","ElementType","Node","OpenRailwayMapApiClient","RailwayEdge","RailwayElement","RailwayGraph","RailwayNode","Way","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect","connect","count_node_elements","count_way_elements","create_nodes","default","default","deserialize","deserialize","deserialize","element_type","eq","eq","eq","eq","eq","fetch_by_area_name","fetch_by_area_name","fetch_by_bbox","fetch_by_bbox","find_next_existing_node","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_json","generate_dot_string","generate_svg_string","geometry","graph","id","id","id","into","into","into","into","into","into","lat","lat","lat","length","lon","lon","lon","new","new_with_id","node_indices","nodes","railway_graph","serialize","serialize","serialize","tags","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","RailwayGraph","borrow","borrow_mut","bounding_box","calculate_geometry_length","find_next_existing_node","fmt","from","from_railway_elements","graph","into","node_indices","try_from","try_into","type_id"],"q":["openrailwaymap_exporter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::railway_graph","","","","","","","","","","","","","",""],"d":["A basic client for the OpenRailwayMap API.","A <code>Coordinate</code> represents a geographic coordinate with …","Represents the type of a <code>RailwayElement</code>.","Represents a <code>Node</code> element in the railway network.","A trait for implementing an OpenRailwayMap API client.","Represents a railway edge with a unique ID and a length.","Represents an element of a railway network.","<code>RailwayGraph</code> represents a graph structure for railway …","Represents a railway node with a unique ID and geographic …","Represents a <code>Way</code> element in the railway network.","","","","","","","","","","","","","","","","","Connect to the OpenRailwayMap API using the specified URL.","","Counts the number of <code>Node</code> elements in a given vector of …","Counts the number of <code>Way</code> elements in a vector of …","Create a vector of <code>RailwayNode</code>s from the provided …","","","","","","The type of the railway element, either <code>Way</code> or <code>Node</code>.","","","","","","Fetch OpenRailwayMap data by area name.","","Fetch OpenRailwayMap data by bounding box.","","Find the next existing node ID and its index in the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a JSON value into a vector of <code>RailwayElement</code> …","Generates a DOT string representation of a given …","Generates an SVG string representation of a given …","An optional list of coordinates that represent the …","The internal graph used to represent the railway network.","The unique identifier of the railway element.","The ID of the edge, typically corresponding to the ID of …","The unique identifier of the railway node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The latitude coordinate, in decimal degrees.","The latitude coordinate of a <code>Node</code> element.","The latitude coordinate of the railway node.","The length of the railway segment in meters.","The longitude coordinate, in decimal degrees.","The longitude coordinate of a <code>Node</code> element.","The longitude coordinate of the railway node.","Creates a new <code>BasicOpenRailwayMapApiClient</code> with no …","Create a new <code>RailwayElement</code> instance with the specified ID.","A HashMap that maps node IDs to their corresponding …","An optional ordered list of node IDs that define the …","A module for working with railway graphs.","","","","Optional key-value pairs associated with the railway …","","","","","","","","","","","","","","","","","","","","","<code>RailwayGraph</code> represents a graph structure for railway …","","","Calculate the bounding box of the graph.","Calculate the total length of a sequence of coordinates by …","Find the next existing node ID and its index in the …","","Returns the argument unchanged.","Create a <code>RailwayGraph</code> from a vector of <code>RailwayElement</code>s.","The internal graph used to represent the railway network.","Calls <code>U::from(self)</code>.","A HashMap that maps node IDs to their corresponding …","","",""],"i":[0,0,0,12,0,0,0,0,0,12,7,1,12,10,14,2,7,1,12,10,14,2,1,2,1,2,27,7,0,0,0,7,10,1,12,10,10,1,12,10,14,2,27,7,27,7,0,1,12,10,14,2,7,1,12,10,14,2,10,0,0,10,22,10,14,2,7,1,12,10,14,2,1,10,2,14,1,10,2,7,10,22,10,0,1,12,10,10,1,2,7,1,12,10,14,2,7,1,12,10,14,2,7,1,12,10,14,2,0,22,22,22,0,0,22,22,22,22,22,22,22,22,22],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[3,[[6,[[5,[4]]]]]],[[7,3],[[6,[[5,[4]]]]]],[[],8],[[],8],[[],[[9,[2]]]],[[],7],[[],10],[[],[[11,[1]]]],[[],[[11,[12]]]],[[],[[11,[10]]]],0,[[1,1],13],[[12,12],13],[[10,10],13],[[14,14],13],[[2,2],13],[3,[[6,[[5,[4]]]]]],[[7,3],[[6,[[5,[4]]]]]],[3,[[6,[[5,[4]]]]]],[[7,3],[[6,[[5,[4]]]]]],[[[16,[15]],17]],[[1,18],19],[[12,18],19],[[10,18],19],[[14,18],19],[[2,18],19],[[]],[[]],[[]],[[]],[[]],[[]],[20,[[11,[[9,[10]],21]]]],[22,[[11,[23,[5,[24]]]]]],[22,[[11,[23,[5,[24]]]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],7],[15,10],0,0,0,[1,11],[12,11],[10,11],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,[[]],[[]],[22],[[],26],[[[16,[15]],17]],[[22,18],19],[[]],[[],22],0,[[]],0,[[],11],[[],11],[[],25]],"p":[[3,"Coordinate"],[3,"RailwayNode"],[15,"str"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"BasicOpenRailwayMapApiClient"],[15,"usize"],[3,"Vec"],[3,"RailwayElement"],[4,"Result"],[4,"ElementType"],[15,"bool"],[3,"RailwayEdge"],[15,"i64"],[4,"Option"],[3,"HashMap"],[3,"Formatter"],[6,"Result"],[4,"Value"],[3,"Error"],[3,"RailwayGraph"],[3,"String"],[8,"Error"],[3,"TypeId"],[15,"f64"],[8,"OpenRailwayMapApiClient"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
