var searchIndex = JSON.parse('{\
"openrailwaymap_exporter":{"doc":"OpenRailwayMap Exporter","t":[3,3,4,8,13,8,3,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,11,11,11,11,11,12,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,12,0,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,11,11,11,12,11,11,11,11],"n":["BasicOpenRailwayMapApiClient","Coordinate","ElementType","GraphOperations","Node","OpenRailwayMapApiClient","RailwayEdge","RailwayElement","RailwayGraph","RailwayNode","Way","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect","connect","create_nodes","default","default","deserialize","deserialize","deserialize","element_type","eq","eq","eq","eq","eq","fetch_by_area_name","fetch_by_area_name","fetch_by_bbox","fetch_by_bbox","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_json","generate_dot_string","generate_svg_string","geometry","graph","id","id","id","into","into","into","into","into","into","lat","lat","lat","length","lon","lon","lon","new","new_with_id","nodes","railway_graph","serialize","serialize","serialize","shortest_route","tags","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","RailwayGraph","borrow","borrow_mut","bounding_box","calculate_geometry_length","fmt","from","from_railway_elements","graph","into","try_from","try_into","type_id"],"q":["openrailwaymap_exporter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::railway_graph","","","","","","","","","","","",""],"d":["","A <code>Coordinate</code> represents a geographic coordinate with …","Represents the type of a <code>RailwayElement</code>.","","","A trait for implementing an OpenRailwayMap API client.","Represents a railway edge with a unique ID and a length.","Represents an element of a railway network.","<code>RailwayGraph</code> represents a graph structure for railway …","Represents a railway node with a unique ID and geographic …","","","","","","","","","","","","","","","","","","Connect to the OpenRailwayMap API using the specified URL.","","Create a vector of <code>RailwayNode</code>s from the provided …","","","","","","","","","","","","Fetch OpenRailwayMap data by area name.","","Fetch OpenRailwayMap data by bounding box.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a JSON value into a vector of <code>RailwayElement</code> …","Generates a DOT string representation of a given …","Generates an SVG string representation of a given …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new <code>RailwayElement</code> instance with the specified ID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>RailwayGraph</code> represents a graph structure for railway …","","","Calculate the bounding box of the graph.","Calculate the total length of a sequence of coordinates by …","","Returns the argument unchanged.","Create a <code>RailwayGraph</code> from a vector of <code>RailwayElement</code>s.","","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,0,0,11,0,0,0,0,0,11,7,1,11,9,13,2,7,1,11,9,13,2,1,2,1,2,25,7,0,7,9,1,11,9,9,1,11,9,13,2,25,7,25,7,1,11,9,13,2,7,1,11,9,13,2,9,0,0,9,18,9,13,2,7,1,11,9,13,2,1,9,2,13,1,9,2,7,9,9,0,1,11,9,26,9,1,2,7,1,11,9,13,2,7,1,11,9,13,2,7,1,11,9,13,2,0,18,18,18,0,18,18,18,18,18,18,18,18],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[3,[[6,[[5,[4]]]]]],[[7,3],[[6,[[5,[4]]]]]],[[],[[8,[2]]]],[[],7],[[],9],[[],[[10,[1]]]],[[],[[10,[11]]]],[[],[[10,[9]]]],0,[[1,1],12],[[11,11],12],[[9,9],12],[[13,13],12],[[2,2],12],[3,[[6,[[5,[4]]]]]],[[7,3],[[6,[[5,[4]]]]]],[3,[[6,[[5,[4]]]]]],[[7,3],[[6,[[5,[4]]]]]],[[1,14],15],[[11,14],15],[[9,14],15],[[13,14],15],[[2,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[16,[[10,[[8,[9]],17]]]],[18,[[10,[19,[5,[20]]]]]],[18,[[10,[19,[5,[20]]]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],7],[21,9],0,0,[1,10],[11,10],[9,10],[[21,21],[[22,[[8,[21]]]]]],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,[[]],[[]],[18],[[],24],[[18,14],15],[[]],[[],18],0,[[]],[[],10],[[],10],[[],23]],"p":[[3,"Coordinate"],[3,"RailwayNode"],[15,"str"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"BasicOpenRailwayMapApiClient"],[3,"Vec"],[3,"RailwayElement"],[4,"Result"],[4,"ElementType"],[15,"bool"],[3,"RailwayEdge"],[3,"Formatter"],[6,"Result"],[4,"Value"],[3,"Error"],[3,"RailwayGraph"],[3,"String"],[8,"Error"],[15,"i64"],[4,"Option"],[3,"TypeId"],[15,"f64"],[8,"OpenRailwayMapApiClient"],[8,"GraphOperations"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
