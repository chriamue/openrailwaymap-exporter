var searchIndex = JSON.parse('{\
"openrailwaymap_exporter":{"doc":"OpenRailwayMap Exporter","t":[0,3,8,3,3,3,11,11,11,11,5,11,11,10,5,11,11,10,10,5,11,11,11,11,5,5,5,12,12,12,11,11,12,12,12,12,0,12,0,11,11,11,11,11,11,11,3,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,12,11,11,11,11],"n":["prelude","OverpassApiClient","RailwayApiClient","RailwayEdge","RailwayGraph","RailwayNode","borrow","borrow","borrow_mut","borrow_mut","calculate_geometry_length","clone","clone_into","connect","create_nodes","eq","eq","fetch_by_area_name","fetch_by_bbox","find_next_existing_node","fmt","fmt","from","from","from_railway_elements","generate_dot_string","generate_svg_string","graph","id","id","into","into","lat","length","lon","node_indices","overpass_api_client","path","railway_graph","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Coordinate","ElementType","Node","OverpassApiClient","RailwayElement","Way","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connect","count_node_elements","count_way_elements","default","default","deserialize","deserialize","deserialize","element_type","eq","eq","eq","fetch_by_area_name","fetch_by_bbox","fmt","fmt","fmt","from","from","from","from","from_json","geometry","id","into","into","into","into","lat","lat","lon","lon","new","new_with_id","nodes","serialize","serialize","serialize","tags","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","RailwayGraph","borrow","borrow_mut","bounding_box","fmt","from","graph","into","node_indices","total_length","try_from","try_into","type_id"],"q":["openrailwaymap_exporter","openrailwaymap_exporter::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::prelude::overpass_api_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::prelude::railway_graph","","","","","","","","","","","",""],"d":["This prelude re-exports the most commonly used items from …","A basic client for the OpenRailwayMap API.","A trait for implementing an Railway API client.","Represents a railway edge with a unique ID, a length, and …","<code>RailwayGraph</code> represents a graph structure for railway …","Represents a railway node with a unique ID and geographic …","","","","","Calculate the total length of a sequence of coordinates by …","","","Connect to the OpenRailwayMap API using the specified URL.","Create a vector of <code>RailwayNode</code>s from the provided …","","","Fetch OpenRailwayMap data by area name.","Fetch OpenRailwayMap data by bounding box.","Find the next existing node ID and its index in the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>RailwayGraph</code> from a vector of <code>RailwayElement</code>s.","Generates a DOT string representation of a given …","Generates an SVG string representation of a given …","The internal graph used to represent the railway network.","The ID of the edge, typically corresponding to the ID of …","The unique identifier of the railway node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The latitude coordinate of the railway node.","The length of the railway segment in meters.","The longitude coordinate of the railway node.","A HashMap that maps node IDs to their corresponding …","overpass api client","The path of the edge, stored as a <code>LineString</code>.","A module for working with railway graphs.","","","","","","","","A <code>Coordinate</code> represents a geographic coordinate with …","Represents the type of a <code>RailwayElement</code>.","Represents a <code>Node</code> element in the railway network.","A basic client for the OpenRailwayMap API.","Represents an element of a railway network.","Represents a <code>Way</code> element in the railway network.","","","","","","","","","","","","Counts the number of <code>Node</code> elements in a given vector of …","Counts the number of <code>Way</code> elements in a vector of …","","","","","","The type of the railway element, either <code>Way</code> or <code>Node</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a JSON value into a vector of <code>RailwayElement</code> …","An optional list of coordinates that represent the …","The unique identifier of the railway element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The latitude coordinate, in decimal degrees.","The latitude coordinate of a <code>Node</code> element.","The longitude coordinate, in decimal degrees.","The longitude coordinate of a <code>Node</code> element.","Creates a new <code>OverpassApiClient</code> with no specified API URL.","Create a new <code>RailwayElement</code> instance with the specified ID.","An optional ordered list of node IDs that define the …","","","","Optional key-value pairs associated with the railway …","","","","","","","","","","","","","","<code>RailwayGraph</code> represents a graph structure for railway …","","","Calculate the bounding box of the graph.","","Returns the argument unchanged.","The internal graph used to represent the railway network.","Calls <code>U::from(self)</code>.","A HashMap that maps node IDs to their corresponding …","Calculate the total length of the railway network.","","",""],"i":[0,0,0,0,0,0,8,2,8,2,0,2,2,27,0,8,2,27,27,0,8,2,8,2,0,0,0,15,8,2,8,2,2,8,2,15,0,8,0,2,8,2,8,2,8,2,0,0,24,0,0,24,21,20,24,23,21,20,24,23,20,20,21,0,0,21,23,20,24,23,23,20,24,23,21,21,20,24,23,21,20,24,23,23,23,23,21,20,24,23,20,23,20,23,21,23,23,20,24,23,23,20,21,20,24,23,21,20,24,23,21,20,24,23,0,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[2,2],[[]],[3,[[6,[[5,[4]]]]]],[[],[[7,[2]]]],[[8,8],9],[[2,2],9],[3,[[6,[[5,[4]]]]]],[3,[[6,[[5,[4]]]]]],[[[11,[10]],12]],[[8,13],14],[[2,13],14],[[]],[[]],[[],15],[15,[[18,[16,[5,[17]]]]]],[15,[[18,[16,[5,[17]]]]]],0,0,0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[[]],[[21,3],[[6,[[5,[4]]]]]],[[],22],[[],22],[[],21],[[],23],[[],[[18,[20]]]],[[],[[18,[24]]]],[[],[[18,[23]]]],0,[[20,20],9],[[24,24],9],[[23,23],9],[[21,3],[[6,[[5,[4]]]]]],[[21,3],[[6,[[5,[4]]]]]],[[20,13],14],[[24,13],14],[[23,13],14],[[]],[[]],[[]],[[]],[25,[[18,[[7,[23]],26]]]],0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[],21],[10,23],0,[20,18],[24,18],[23,18],0,[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],0,[[]],[[]],[15],[[15,13],14],[[]],0,[[]],0,[15,1],[[],18],[[],18],[[],19]],"p":[[15,"f64"],[3,"RailwayNode"],[15,"str"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"Vec"],[3,"RailwayEdge"],[15,"bool"],[15,"i64"],[4,"Option"],[3,"HashMap"],[3,"Formatter"],[6,"Result"],[3,"RailwayGraph"],[3,"String"],[8,"Error"],[4,"Result"],[3,"TypeId"],[3,"Coordinate"],[3,"OverpassApiClient"],[15,"usize"],[3,"RailwayElement"],[4,"ElementType"],[4,"Value"],[3,"Error"],[8,"RailwayApiClient"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
