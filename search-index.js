var searchIndex = JSON.parse('{\
"openrailwaymap_exporter":{"doc":"OpenRailwayMap Exporter","t":[0,0,0,0,5,5,2,2,2,2,8,10,10,10,0,3,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,3,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["export","prelude","railway_api_client","railway_model","generate_dot_string","generate_svg_string","OverpassApiClient","RailwayApiClient","overpass_api_client","OverpassApiClient","RailwayApiClient","connect","fetch_by_area_name","fetch_by_bbox","overpass_api_client","Coordinate","ElementType","Node","OverpassApiClient","RailwayElement","Way","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connect","count_node_elements","count_way_elements","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","element_type","eq","eq","eq","fetch_by_area_name","fetch_by_bbox","fmt","fmt","fmt","from","from","from","from","from_json","from_subset","from_subset","from_subset","from_subset","geometry","id","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","lat","lat","lon","lon","new","new_with_id","nodes","serialize","serialize","serialize","tags","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","RailwayEdge","RailwayGraph","RailwayNode","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","calculate_geometry_length","clone","clone_into","create_nodes","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","find_next_existing_node","fmt","fmt","from","from","from_railway_elements","from_subset","from_subset","id","id","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","lat","length","lon","path","railway_graph","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","RailwayGraph","as_any","as_any_mut","borrow","borrow_mut","bounding_box","deref","deref_mut","drop","fmt","from","from_subset","graph","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","node_indices","to_subset","to_subset_unchecked","total_length","try_from","try_into","type_id"],"q":["openrailwaymap_exporter","","","","openrailwaymap_exporter::export","","openrailwaymap_exporter::prelude","","","openrailwaymap_exporter::railway_api_client","","","","","","openrailwaymap_exporter::railway_api_client::overpass_api_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::railway_model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","openrailwaymap_exporter::railway_model::railway_graph","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Export module for the OpenRailwayMap Exporter.","This prelude re-exports the most commonly used items from …","Railway API Client module for the OpenRailwayMap Exporter.","Railway Model module for the OpenRailwayMap Exporter.","Generates a DOT string representation of a given …","Generates an SVG string representation of a given …","","","","","A trait for implementing an Railway API client.","Connect to the OpenRailwayMap API using the specified URL.","Fetch OpenRailwayMap data by area name.","Fetch OpenRailwayMap data by bounding box.","overpass api client","A <code>Coordinate</code> represents a geographic coordinate with …","Represents the type of a <code>RailwayElement</code>.","Represents a <code>Node</code> element in the railway network.","A basic client for the OpenRailwayMap API.","Represents an element of a railway network.","Represents a <code>Way</code> element in the railway network.","","","","","","","","","","","","","","","","","","","","Counts the number of <code>Node</code> elements in a given vector of …","Counts the number of <code>Way</code> elements in a vector of …","","","","","","","","","","","","","","","","","","The type of the railway element, either <code>Way</code> or <code>Node</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a JSON value into a vector of <code>RailwayElement</code> …","","","","","An optional list of coordinates that represent the …","The unique identifier of the railway element.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The latitude coordinate, in decimal degrees.","The latitude coordinate of a <code>Node</code> element.","The longitude coordinate, in decimal degrees.","The longitude coordinate of a <code>Node</code> element.","Creates a new <code>OverpassApiClient</code> with no specified API URL.","Create a new <code>RailwayElement</code> instance with the specified ID.","An optional ordered list of node IDs that define the …","","","","Optional key-value pairs associated with the railway …","","","","","","","","","","","","","","","","","","","","","","Represents a railway edge with a unique ID, a length, and …","","Represents a railway node with a unique ID and geographic …","","","","","","","","","Calculate the total length of a sequence of coordinates by …","","","Create a vector of <code>RailwayNode</code>s from the provided …","","","","","","","","","Find the next existing node ID and its index in the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>RailwayGraph</code> from a vector of <code>RailwayElement</code>s.","","","The ID of the edge, typically corresponding to the ID of …","The unique identifier of the railway node.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The latitude coordinate of the railway node.","The length of the railway segment in meters.","The longitude coordinate of the railway node.","The path of the edge, stored as a <code>LineString</code>.","A module for working with railway graphs.","","","","","","","","","","","","<code>RailwayGraph</code> represents a graph structure for railway …","","","","","Calculate the bounding box of the graph.","","","","","Returns the argument unchanged.","","The internal graph used to represent the railway network.","","Calls <code>U::from(self)</code>.","","","","","A HashMap that maps node IDs to their corresponding …","","","Calculate the total length of the railway network.","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,31,31,31,0,0,0,14,0,0,14,11,10,14,13,11,10,14,13,11,10,14,13,11,10,14,13,10,10,11,0,0,11,13,11,10,14,13,11,10,14,13,10,14,13,11,10,14,13,13,10,14,13,11,11,10,14,13,11,10,14,13,13,11,10,14,13,13,13,11,10,14,13,11,10,14,13,11,10,14,13,11,10,14,13,11,10,14,13,11,10,14,13,10,13,10,13,11,13,13,10,14,13,13,10,11,10,14,13,11,10,14,13,11,10,14,13,11,10,14,13,11,10,14,13,0,0,0,29,28,29,28,29,28,29,28,0,28,28,0,29,28,29,28,29,28,29,28,0,29,28,29,28,0,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,28,29,28,29,0,28,29,28,29,28,29,28,29,28,29,28,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,[1,[[5,[2,[4,[3]]]]]],[1,[[5,[2,[4,[3]]]]]],0,0,0,0,0,[6,[[8,[[4,[7]]]]]],[6,[[8,[[4,[7]]]]]],[6,[[8,[[4,[7]]]]]],0,0,0,0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,10],[[]],[[11,6],[[8,[[4,[7]]]]]],[[],12],[[],12],[[],11],[[],13],[12],[12],[12],[12],[12],[12],[12],[12],[[],[[5,[10]]]],[[],[[5,[14]]]],[[],[[5,[13]]]],[12],[12],[12],[12],0,[[10,10],15],[[14,14],15],[[13,13],15],[[11,6],[[8,[[4,[7]]]]]],[[11,6],[[8,[[4,[7]]]]]],[[10,16],17],[[14,16],17],[[13,16],17],[[]],[[]],[[]],[[]],[18,[[5,[[19,[13]],20]]]],[[]],[[]],[[]],[[]],0,0,[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[[4,[21]]],[[4,[9,21]]]],[[[4,[21]]],[[4,[9,21]]]],[[[4,[21]]],[[4,[9,21]]]],[[[4,[21]]],[[4,[9,21]]]],[22,[[22,[9]]]],[22,[[22,[9]]]],[22,[[22,[9]]]],[22,[[22,[9]]]],[23,[[23,[9]]]],[23,[[23,[9]]]],[23,[[23,[9]]]],[23,[[23,[9]]]],[[],15],[[],15],[[],15],[[],15],0,0,0,0,[[],11],[24,13],0,[10,5],[14,5],[13,5],0,[[]],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],26],[[],26],[[],26],[[],26],0,0,0,[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[],27],[28,28],[[]],[[],[[19,[28]]]],[12],[12],[12],[12],[12],[12],[[29,29],15],[[28,28],15],[[[25,[24]],30]],[[29,16],17],[[28,16],17],[[]],[[]],[[],1],[[]],[[]],0,0,[[],12],[[],12],[[]],[[]],[[[4,[21]]],[[4,[9,21]]]],[[[4,[21]]],[[4,[9,21]]]],[22,[[22,[9]]]],[22,[[22,[9]]]],[23,[[23,[9]]]],[23,[[23,[9]]]],[[],15],[[],15],0,0,0,0,0,[[]],[[],25],[[],25],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],26],[[],26],0,[[],9],[[],9],[[]],[[]],[1],[12],[12],[12],[[1,16],17],[[]],[[]],0,[[],12],[[]],[[[4,[21]]],[[4,[9,21]]]],[22,[[22,[9]]]],[23,[[23,[9]]]],[[],15],0,[[],25],[[]],[1,27],[[],5],[[],5],[[],26]],"p":[[3,"RailwayGraph"],[3,"String"],[8,"Error"],[3,"Box"],[4,"Result"],[15,"str"],[8,"Future"],[3,"Pin"],[8,"Any"],[3,"Coordinate"],[3,"OverpassApiClient"],[15,"usize"],[3,"RailwayElement"],[4,"ElementType"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Value"],[3,"Vec"],[3,"Error"],[3,"Global"],[3,"Arc"],[3,"Rc"],[15,"i64"],[4,"Option"],[3,"TypeId"],[15,"f64"],[3,"RailwayNode"],[3,"RailwayEdge"],[3,"HashMap"],[8,"RailwayApiClient"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
